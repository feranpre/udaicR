
error.text.es <- c("MISSING_VAR" = "no se ha indicado 'variable'",
                    "DATA_TYPE" = "el primer parámetro debe ser un data.frame, o un vector de números",
                    "NO_NUM" = "se ha detectado una variable o vector que no es un número",
                    "NUMERIC_NOT_FOUND" = "no se ha detectado ninguna variable numérica aceptable para la correlación",
                    "DIFF_LENGTH" = "algun vector o variable tiene un tamaño diferente al resto",
                    "MISSING_DATA" = "'variable' se ha indicado como texto sin pasar base de datos en 'data'",
                    "MISSING_IN_DATA.FRAME" = " no existe en la base de datos", # hay que pegarle antes el nombre de la variable,
                    "ONLY_1_VECTOR" = "La correlación no puede hacerse solo con una variable"
                    )


error.text.en <- c("MISSING_VAR" = "'variable' is missing",
                   "DATA_TYPE" = "the first argument must be either a data.frame or a numeric vector",
                   "NO_NUM" = "non numeric variable or vector detected",
                   "NUMERIC_NOT_FOUND" = "no numeric variable has been detected, therefore the correlation can't procede",
                   "DIFF_LENGTH" = "vector or variable of different length to the rest",
                   "MISSING_DATA" = "'variable' is a string but no data.frame was specified in 'data'",
                   "MISSING_IN_DATA.FRAME" = " not pressent in the data.frame", # hay que pegarle antes el nombre de la variable,
                   "ONLY_1_VECTOR" = "Correlation needs more than 1 variable"
                  )

theory.es <- paste0(
                "\n**LA CORRELACION** \n\n",
                "\nLa correlación indica la fuerza y dirección de una relación lineal y proporcional entre dos variables numéricas. Lo que indica el valor de la correlación es qué ocurre a la variable B cuando una variable A modifica su valor. Digamos que A incrementa su valor, entonces si la correlación es positiva B también incrementará su valor. Si la correlación es negativa entonces B decrementa su valor y se dice que la correlación es inversa.\n",
                "\n**VALORACION DEL RESULTADO** \n\n",
                "\nLos valores de la correlación van de -1 a 1, siendo 0 un efecto nulo, 1 una correlación perfecta y -1 una correlación perfecta e inversa.",
                "\nAl margen de los extremos (1 y -1) que se consideran perfectos, los valores de corte para las interpretaciones son muy variados, nosotros hemos usado los siguientes:\n",
                "\n* (> 0     y < 0.25) - Debil",
                "\n* (>= 0.25 y < 0.5)  - Moderada",
                "\n* (>= 0.5  y < 0.75) - Fuerte",
                "\n* (>= 0.75)          - Muy Fuerte",
                "\n",
                "\nAdemás hace falta tener en cuenta que existen diferentes métodos para calcular las correlaciones:\n",
                "\n* Si ambas variables siguen una distribución normal:  correlación de Pearson",
                "\n* Si alguna variable no sigue una correlación normal: correlación de Spearman",
                "\n* Si la correlación de Spearman tiene empates:        tau de Kendall"
              )



correlation <- function(data,..., decimals = 2,
                 show.errors = TRUE, show.warnings = TRUE, DEBUG = FALSE,
                 show.main.matrix = TRUE, show.cor.matrix = FALSE, show.p.matrix = FALSE, show.method.matrix = FALSE,
                 method = "auto", show.theory = FALSE, show.interpretation = FALSE, lang = "en") {

  if (!requireNamespace("dplyr", quietly = TRUE)) {
    stop("Package \"dplyr\" needed for this function to work. Please install it.",
         call. = FALSE)
  }
  tryCatch({
    library(dplyr)
  }, warning = function(warn){

  }, error = function(err){

  })

  #-- data must EXIST and be either a data.frame or a numeric vector
  if(missing(data)){
    if (show.errors) stop(error.text["MISSING_DATA"]) # if var is a char data is MANDATORY
    else return("Error")
  }

  UseMethod("correlation", data,..., decimals = 2,
            show.errors = TRUE, show.warnings = TRUE, DEBUG = FALSE,
            show.main.matrix = TRUE, show.cor.matrix = FALSE, show.p.matrix = FALSE, show.method.matrix = FALSE,
            method = "auto", show.theory = FALSE, show.interpretation = FALSE, lang = "en")
}

#' probar a usar corr.data.frame y corr.numeric y cosas así para montar una forma más consistente de estadística

correlation.numeric <- function(data,..., decimals = 2,
                         show.errors = TRUE, show.warnings = TRUE, DEBUG = FALSE,
                         show.main.matrix = TRUE, show.cor.matrix = FALSE, show.p.matrix = FALSE, show.method.matrix = FALSE,
                         method = "auto", show.theory = FALSE, show.interpretation = FALSE, lang = "en") {

}


correlation.data.frame <- function(data,..., decimals = 2,
                         show.errors = TRUE, show.warnings = TRUE, DEBUG = FALSE,
                         show.main.matrix = TRUE, show.cor.matrix = FALSE, show.p.matrix = FALSE, show.method.matrix = FALSE,
                         method = "auto", show.theory = FALSE, show.interpretation = FALSE, lang = "en") {
  print("DENTRO data.frame")
}


correlation.character <- function(data,..., decimals = 2,
                         show.errors = TRUE, show.warnings = TRUE, DEBUG = FALSE,
                         show.main.matrix = TRUE, show.cor.matrix = FALSE, show.p.matrix = FALSE, show.method.matrix = FALSE,
                         method = "auto", show.theory = FALSE, show.interpretation = FALSE, lang = "en") {
  print("DENTRO character")
}

.old.correlation <- function(data,..., decimals = 2,
                        show.errors = TRUE, show.warnings = TRUE, DEBUG = FALSE,
                        show.main.matrix = TRUE, show.cor.matrix = FALSE, show.p.matrix = FALSE, show.method.matrix = FALSE,
                        method = "auto", show.theory = FALSE, show.interpretation = FALSE, lang = "en") {



  if (lang == "es"){
    error.text <- error.text.es
  }
  else {
    error.text <- error.text.en
  }

  #=================================================
  # CHEKING ARGS
  #=================================================


  if((!is.numeric(data)) & (class(data) != "data.frame")){
    if (show.errors) stop(error.text["DATA_TYPE"])
    else return("Error")
  }

  #=================================================
  # INIT VARS
  #=================================================
  # result_temp <- list()
  vars <- enquos(...)
  vars.num <- length(vars)
  # DATOS <- data.frame()


  #=================================================
  # ARGS ARE VECTORS
  #=================================================
  #-- if data is not a data frame and there are more variables those must be vectors too
  if (!is.data.frame(data)) {

    if(!is.numeric(data)) {
      if (show.errors) stop(paste(v,error.text["NO_NUM"]))
      else result_temp[[length(result_temp)+1]] <- "Error"
    }
    else {
      #-- get var.name
      var.name <- deparse(substitute(data))
      if (length(grep("$",var.name, fixed=TRUE)) == 1) var.name <- sub(".*\\$","",var.name)

      #-- create data.frame
      DATOS <- as.data.frame(data)
      names(DATOS) <- var.name
    }

    #-------------------------- ONLY 1 VECTOR is present
    if (vars.num <= 0) {
      if (show.errors) stop(error.text["ONLY_1_VECTOR"])
      else return(error.text["ONLY_1_VECTOR"])
    }
    #------------------------- MORE THAN 1 VECTOR is present
    else {
      count = 1
      for(v in list(...)) {
        if(!is.numeric(v)) {
          if (show.errors) stop(paste(v,error.text["NO_NUM"]))
          else result_temp[[length(result_temp)+1]] <- "Error"
        }
        else {
          #-------------------- vector is numeric and gets added to DATOS
          #-- get var.name
          if (grep("$",vars[count], fixed=TRUE) == 1) var.name <- sub(".*\\$","",vars[count])
          else var.name <- vars[count]

          if (!exists("DATOS")) {
            #-- create data.frame
            DATOS <- as.data.frame(data)
            names(DATOS) <- var.name
          }
          else {
            #-- add to data.frame
            if (length(v) == nrow(DATOS)) {
              d.temp <- data.frame(v)
              names(d.temp) <- var.name
              DATOS <- cbind(DATOS,d.temp)
              rm(list = "d.temp")
            }
            else {
              if (show.errors) stop(paste(v,error.text["NO_NUM"]))
              else result_temp[[length(result_temp)+1]] <- "Error"
            }
          } #--- end else length(v) == nrow(DATOS)
        } #--- end else !is.numeric
        count = count + 1
      } #--- end for vectores

      rm(list = "count")
      # print(DATOS) #----- CORRELATION
      # return(.correlation(DATOS, DEBUG = DEBUG, show.errors = show.errors, show.warnings = show.warnings, decimals = decimals, show.main.matrix = show.main.matrix, show.cor.matrix = show.cor.matrix, show.p.matrix = show.p.matrix, show.method.matrix = show.method.matrix, method = method))
    } #--- end else if there is only 1 vector

  } # end if datos !is.data.frame
  #=================================================
  # THERE IS A DATA.FRAME
  #=================================================
  #-- if data is a data.frame vars must be valid
  else {
    if (length(vars) == 0) vars <- names(data)
    for(v in vars) {
      vs <- quo_name(v)
      # ------- NOT IN DATA.FRAME
      if(!(vs %in% names(data))){
        if (show.errors) stop(paste(vs,error.text["MISSING_IN_DATA.FRAME"]))
        else result_temp[[length(result_temp)+1]] <- "Error"
      }
      # ------- IN DATA.FRAME
      else {
        var.name <- vs
        var.datos <- data %>% select(!! v)
        if (DEBUG) print(paste(var.name,"--> ¿num? -->",is.numeric(var.datos[,1])))
        if (is.numeric(var.datos[,1])) {
          if (!exists("DATOS")) DATOS <- var.datos
          else DATOS <- cbind(DATOS,var.datos)
        }
      }
    } #--for
    # return(.correlation(DATOS, DEBUG = DEBUG, show.errors = show.errors, show.warnings = show.warnings, decimals = decimals, show.main.matrix = show.main.matrix, show.cor.matrix = show.cor.matrix, show.p.matrix = show.p.matrix, show.method.matrix = show.method.matrix, method = method))
  }
  if (!exists("DATOS")) {
    if (show.warnings) print(error.text["NUMERIC_NOT_FOUND"])
    return(NA)
  }

  resultados = .correlation(DATOS, DEBUG = DEBUG, show.errors = show.errors, show.warnings = show.warnings, decimals = decimals, method = method)

  if (show.theory) {
    resultados[["interpretacion_texto"]] <- paste0(
      "\n**LA CORRELACION** \n\n",
      "\nLa correlación indica la fuerza y dirección de una relación lineal y proporcional entre dos variables numéricas. Lo que indica el valor de la correlación es qué ocurre a la variable B cuando una variable A modifica su valor. Digamos que A incrementa su valor, entonces si la correlación es positiva B también incrementará su valor. Si la correlación es negativa entonces B decrementa su valor y se dice que la correlación es inversa.\n",
      "\n**VALORACION DEL RESULTADO** \n\n",
      "\nLos valores de la correlación van de -1 a 1, siendo 0 un efecto nulo, 1 una correlación perfecta y -1 una correlación perfecta e inversa.",
      "\nAl margen de los extremos (1 y -1) que se consideran perfectos, los valores de corte para las interpretaciones son muy variados, nosotros hemos usado los siguientes:\n",
      "\n* (> 0     y < 0.25) - Debil",
      "\n* (>= 0.25 y < 0.5)  - Moderada",
      "\n* (>= 0.5  y < 0.75) - Fuerte",
      "\n* (>= 0.75)          - Muy Fuerte",
      "\n",
      "\nAdemás hace falta tener en cuenta que existen diferentes métodos para calcular las correlaciones:\n",
      "\n* Si ambas variables siguen una distribución normal:  correlación de Pearson",
      "\n* Si alguna variable no sigue una correlación normal: correlación de Spearman",
      "\n* Si la correlación de Spearman tiene empates:        tau de Kendall"
    )

    lims <- list()
    lims[["spearman"]] <- c(debil = 0.25, moderada = 0.5, fuerte = 0.75)
    lims[["pearson"]] <- c(debil = 0.25, moderada = 0.5, fuerte = 0.75)
    lims[["kendall"]] <- c(debil = 0.25, moderada = 0.5, fuerte = 0.75)

    for(vx in names(resultados[["cor"]])) {
      vector <- "--"
      for(vy in rownames(resultados[["cor"]])){
        valor  <- resultados[["cor"]][vy,vx]
        metodo <- resultados[["method"]][vy,vx]
        # print(paste("V ->", valor, "  M ->",metodo))
        if (!is.na(metodo)) {
          if ((resultados[["p"]][vx,vy] < 10^((decimals+1)*-1)) & (abs(valor) < lims[[metodo]]["debil"]) ){
            if (valor < 0) vector <- c(vector,"DEBIL (inv)")
            else vector <- c(vector,"DEBIL")
          }
          else if ((resultados[["p"]][vx,vy] < 10^((decimals+1)*-1)) & (abs(valor) < lims[[metodo]]["moderada"]) ) {
            if (valor < 0) vector <- c(vector,"MODERADA (inv)")
            else vector <- c(vector,"MODERADA")
          }
          else if ((resultados[["p"]][vx,vy] < 10^((decimals+1)*-1)) & (abs(valor) < lims[[metodo]]["fuerte"]) ) {
            if (valor < 0) vector <- c(vector,"FUERTE (inv)")
            else vector <- c(vector,"FUERTE")
          }
          else if ((resultados[["p"]][vx,vy] < 10^((decimals+1)*-1)) & (abs(valor) >= lims[[metodo]]["fuerte"]) ) {
            if (valor < 0) vector <- c(vector,"MUY FUERTE (inv)")
            else vector <- c(vector,"MUY FUERTE")
          }
          else vector <- c(vector,".")
        }
        else vector <- c(vector, "NA")
      }
      vector <- vector[-1]
      if (!exists("resultados.interpretacion")) resultados.interpretacion <- as.data.frame(vector)
      else resultados.interpretacion <- cbind(resultados.interpretacion, vector)
    }

    # print(resultados.interpretacion)
    names(resultados.interpretacion) <- names(resultados[["cor"]])
    rownames(resultados.interpretacion) <- rownames(resultados[["cor"]])


    resultados[["interpretacion"]] <- resultados.interpretacion
  }

  if(!show.main.matrix) resultados[["main"]] = NULL
  if(!show.cor.matrix) resultados[["cor"]] = NULL
  if(!show.p.matrix) resultados[["p"]] = NULL
  if(!show.method.matrix) resultados[["method"]] = NULL

  if (length(resultados) == 1) resultados <- as.data.frame(resultados[[1]])

  class(resultados) <- append(class(resultados), "udaicR.cor")
  return(resultados)
}

print.udaicR.cor <- function(obj){
  print(obj)
}

.correlation <- function(datos, decimals = 2,
                         DEBUG = FALSE, show.warnings = FALSE, show.errors = FALSE,
                         method = "auto") {
  variables_X <- names(datos)
  variables_Y <- variables_X
  method.picked <- method

  for(varx in variables_X) {

    for(vary in variables_Y) {
      varx.datos <- datos[,varx]
      vary.datos <- datos[,vary]

      varx.n <- sum(!is.na(varx.datos))
      vary.n <- sum(!is.na(vary.datos))

      if (varx == vary) {
        rho <- 1
        p.rho <- NA
        method <- NA
      }
      else {
        if (method.picked == "auto") {

          varx.normal <- is.normal(varx.datos)
          # if((varx.n > 3) & (varx.n < 5000)) varx.normal <- ifelse(shapiro.test(varx.datos)$p.value < 0.05, FALSE, TRUE)
          # else if(varx.n > 3) varx.normal <- ifelse(nortest::lillie.test(varx.datos)$p.value < 0.05, FALSE, TRUE)
          # else varx.normal <- FALSE

          vary.normal <- is.normal(vary.datos)
          # if((vary.n > 3) & (vary.n < 5000)) vary.normal <- ifelse(shapiro.test(vary.datos)$p.value < 0.05, FALSE, TRUE)
          # else if(vary.n > 3) vary.normal <- ifelse(nortest::lillie.test(vary.datos)$p.value < 0.05, FALSE, TRUE)
          # else vary.normal <- FALSE

          if (varx.normal & vary.normal) {
            rho <- round(cor(varx.datos, vary.datos, method = "pearson", use = "pairwise.complete.obs"), digits = decimals)
            p.rho <- round(cor.test(varx.datos, vary.datos, method = "pearson", use = "pairwise.complete.obs")$p.value, digits = decimals)
            method <- "pearson"
          }
          else {
            # ---------- checkinf for ties in Spearman rho
            ties <- tryCatch({
              cor.test(varx.datos, vary.datos, method = "spearman", use = "pairwise.complete.obs")$p.value
            }, warning = function(warn)  {
              if (warn$message == "Cannot compute exact p-value with ties") {
                if (show.warnings) writeLines(paste("\nWARNING udaicR::correlations -> there are ties in the data, using Kendall tau instead \n",warn))
                return(TRUE)
              }

            }, error = function(err) {
              if (show.errors) writeLines(paste("\n ERROR udaicR::correlations ->",err))
              return(TRUE)
            }
            )

            if (is.numeric(ties)) {
              rho <- round(cor(varx.datos, vary.datos, method = "spearman", use="pairwise.complete.obs"), digits = decimals)
              p.rho <- round(cor.test(varx.datos, vary.datos, method = "spearman", use = "pairwise.complete.obs")$p.value, digits = decimals)
              method <- "spearman"
            }
            else  {
              # ---------- checkinf for ties in Kendall tau
              ties <- tryCatch({
                cor.test(varx.datos, vary.datos, method = "kendall", use = "pairwise.complete.obs")$p.value
              }, warning = function(warn)  {
                if (warn$message == "Cannot compute exact p-value with ties") {
                  if (show.warnings) print(paste("\n WARNING udaicR::correlations -> there are ties in the data, even after using Kendall tau --> \n",warn))
                  return(TRUE)
                }

              }, error = function(err) {
                if (show.errors) print(paste("\n ERROR udaicR::correlations ->",err))
                return(TRUE)
              }
              )
              if (is.numeric(ties)) {
                rho <- round(cor(varx.datos, vary.datos, method = "kendall", use="pairwise.complete.obs"), digits = decimals)
                p.rho <- round(cor.test(varx.datos, vary.datos, method = "kendall", use = "pairwise.complete.obs")$p.value, digits = decimals)
                method <- "kendall"
              } else {
                rho <- round(cor(varx.datos, vary.datos, method = "kendall", use="pairwise.complete.obs"), digits = decimals)
                p.rho <- round(cor.test(varx.datos, vary.datos, method = "kendall", use = "pairwise.complete.obs", exact = FALSE)$p.value, digits = decimals)
                method <- "kendall"

              } #--- kendall ties
            }# --- spearman ties
          } # --- vars not normal
        }
        else {
          rho <- round(cor(varx.datos, vary.datos, method = method.picked, use = "pairwise.complete.obs"), digits = decimals)
          p.rho <- round(cor.test(varx.datos, vary.datos, method = method.picked, use = "pairwise.complete.obs")$p.value, digits = decimals)
          method <- method.picked
        } # --- method is not FALSE


      }
      if (!is.na(p.rho)) {
        if (p.rho < 10^((decimals + 1)*-1)) p.rho = paste0("<",10^((decimals + 1)*-1))
      }

      if(!exists("cor.rho")) {
        cor.rho <- rho
        cor.method <- method
        cor.p <- p.rho
        cor.main <- paste0(rho,"(",p.rho,")[",substr(method,1,1),"]")
      }
      else {
        cor.rho <- c(cor.rho, rho)
        cor.method <- c(cor.method,method)
        cor.p <- c(cor.p,p.rho)
        cor.main <- c(cor.main,paste0(rho,"(",p.rho,")[",substr(method,1,1),"]"))
      }
    } # --- for interno

    if(!exists("result_temp.rho")) {
      result_temp.rho <- data.frame(cor.rho)
      result_temp.P <- data.frame(cor.p)
      result_temp.method <- data.frame(cor.method)
      result_temp.main <- data.frame(cor.main)
    }
    else {
      result_temp.rho <- cbind(result_temp.rho, cor.rho)
      result_temp.P <- cbind(result_temp.P, cor.p)
      result_temp.method <- cbind(result_temp.method, cor.method)
      result_temp.main <- cbind(result_temp.main, cor.main)
    }

    cor.rho <- NULL
    cor.method <- NULL
    cor.p <- NULL
    cor.varY <- NULL
    cor.main <- NULL

  } # --- for externo
  rownames(result_temp.rho) <- names(datos)
  rownames(result_temp.P) <- names(datos)
  rownames(result_temp.method) <- names(datos)
  rownames(result_temp.main) <- names(datos)
  names(result_temp.rho) <- names(datos)
  names(result_temp.P) <- names(datos)
  names(result_temp.method) <- names(datos)
  names(result_temp.main) <- names(datos)

  resultados = list(main = result_temp.main, cor = result_temp.rho, p = result_temp.P, method = result_temp.method)

  return(resultados)
}



